=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class RatesAndAvailabilityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the rooms availability for the corresponding channel / property / dates
    # Get the rooms availability for the corresponding channel / property / dates
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param date_from [String] Starting date to get availability
    # @param date_to [String] Ending date to get availability
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def availability_get(channel_id, property_id, date_from, date_to, opts = {})
      availability_get_with_http_info(channel_id, property_id, date_from, date_to, opts)
      nil
    end

    # Get the rooms availability for the corresponding channel / property / dates
    # Get the rooms availability for the corresponding channel / property / dates
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param date_from [String] Starting date to get availability
    # @param date_to [String] Ending date to get availability
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def availability_get_with_http_info(channel_id, property_id, date_from, date_to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesAndAvailabilityApi.availability_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling RatesAndAvailabilityApi.availability_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling RatesAndAvailabilityApi.availability_get"
      end
      # verify the required parameter 'date_from' is set
      if @api_client.config.client_side_validation && date_from.nil?
        fail ArgumentError, "Missing the required parameter 'date_from' when calling RatesAndAvailabilityApi.availability_get"
      end
      # verify the required parameter 'date_to' is set
      if @api_client.config.client_side_validation && date_to.nil?
        fail ArgumentError, "Missing the required parameter 'date_to' when calling RatesAndAvailabilityApi.availability_get"
      end
      # resource path
      local_var_path = '/availability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'dateFrom'] = date_from
      query_params[:'dateTo'] = date_to

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesAndAvailabilityApi#availability_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set your availability in the defined channel / property / room
    # Set your availability in the defined channel / property / room
    # @param body [AvailabilityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def availability_post(body, opts = {})
      availability_post_with_http_info(body, opts)
      nil
    end

    # Set your availability in the defined channel / property / room
    # Set your availability in the defined channel / property / room
    # @param body [AvailabilityRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def availability_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesAndAvailabilityApi.availability_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RatesAndAvailabilityApi.availability_post"
      end
      # resource path
      local_var_path = '/availability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesAndAvailabilityApi#availability_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set rates (derived) for your channel / property / room /rate
    # Used in Booking channel only on derived prices
    # @param body [RatesDerivedRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rates_derived_post(body, opts = {})
      rates_derived_post_with_http_info(body, opts)
      nil
    end

    # Set rates (derived) for your channel / property / room /rate
    # Used in Booking channel only on derived prices
    # @param body [RatesDerivedRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rates_derived_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesAndAvailabilityApi.rates_derived_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RatesAndAvailabilityApi.rates_derived_post"
      end
      # resource path
      local_var_path = '/rates-derived'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesAndAvailabilityApi#rates_derived_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set rates for your channel / property / room /rate
    # Set rates according to the price model defined in the channel property<br> Some parameters depend on the price model. Please check documentation
    # @param body [RatesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rates_post(body, opts = {})
      rates_post_with_http_info(body, opts)
      nil
    end

    # Set rates for your channel / property / room /rate
    # Set rates according to the price model defined in the channel property&lt;br&gt; Some parameters depend on the price model. Please check documentation
    # @param body [RatesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rates_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesAndAvailabilityApi.rates_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RatesAndAvailabilityApi.rates_post"
      end
      # resource path
      local_var_path = '/rates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesAndAvailabilityApi#rates_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of rooms and rates for the corresponding channel / property
    # Get a list of rooms and rates for the corresponding channel / property
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [RoomRatesResponse]
    def room_rates_get(channel_id, property_id, opts = {})
      data, _status_code, _headers = room_rates_get_with_http_info(channel_id, property_id, opts)
      data
    end

    # Get a list of rooms and rates for the corresponding channel / property
    # Get a list of rooms and rates for the corresponding channel / property
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoomRatesResponse, Integer, Hash)>] RoomRatesResponse data, response status code and response headers
    def room_rates_get_with_http_info(channel_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RatesAndAvailabilityApi.room_rates_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling RatesAndAvailabilityApi.room_rates_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling RatesAndAvailabilityApi.room_rates_get"
      end
      # resource path
      local_var_path = '/room-rates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'RoomRatesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RatesAndAvailabilityApi#room_rates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
