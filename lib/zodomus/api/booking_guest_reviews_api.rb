=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class BookingGuestReviewsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a list of guest reviews
    # Get a list of guest reviews
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :review_id Review id supplied by the channel
    # @return [GuestReviewsResponse]
    def reviews_get(channel_id, property_id, opts = {})
      data, _status_code, _headers = reviews_get_with_http_info(channel_id, property_id, opts)
      data
    end

    # Get a list of guest reviews
    # Get a list of guest reviews
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :review_id Review id supplied by the channel
    # @return [Array<(GuestReviewsResponse, Integer, Hash)>] GuestReviewsResponse data, response status code and response headers
    def reviews_get_with_http_info(channel_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingGuestReviewsApi.reviews_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingGuestReviewsApi.reviews_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingGuestReviewsApi.reviews_get"
      end
      # resource path
      local_var_path = '/reviews'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'reviewId'] = opts[:'review_id'] if !opts[:'review_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GuestReviewsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingGuestReviewsApi#reviews_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reply to to a guest review
    # Reply to an opportunity, setting the status as ENABLE or DISMISS
    # @param body [ReviewsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reviews_post(body, opts = {})
      reviews_post_with_http_info(body, opts)
      nil
    end

    # Reply to to a guest review
    # Reply to an opportunity, setting the status as ENABLE or DISMISS
    # @param body [ReviewsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reviews_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingGuestReviewsApi.reviews_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BookingGuestReviewsApi.reviews_post"
      end
      # resource path
      local_var_path = '/reviews'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingGuestReviewsApi#reviews_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of guest reviews score from a property
    # Get a list of guest reviews score from a property
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [ReviewsScoreResponse]
    def reviews_score_get(channel_id, property_id, opts = {})
      data, _status_code, _headers = reviews_score_get_with_http_info(channel_id, property_id, opts)
      data
    end

    # Get a list of guest reviews score from a property
    # Get a list of guest reviews score from a property
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReviewsScoreResponse, Integer, Hash)>] ReviewsScoreResponse data, response status code and response headers
    def reviews_score_get_with_http_info(channel_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingGuestReviewsApi.reviews_score_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingGuestReviewsApi.reviews_score_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingGuestReviewsApi.reviews_score_get"
      end
      # resource path
      local_var_path = '/reviews-score'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReviewsScoreResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingGuestReviewsApi#reviews_score_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
