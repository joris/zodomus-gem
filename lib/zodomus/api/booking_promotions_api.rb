=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class BookingPromotionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate a promotion
    # Activate a promotion
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param promotion_id [String] Promotion Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_promotion_post(channel_id, property_id, promotion_id, opts = {})
      activate_promotion_post_with_http_info(channel_id, property_id, promotion_id, opts)
      nil
    end

    # Activate a promotion
    # Activate a promotion
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param promotion_id [String] Promotion Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def activate_promotion_post_with_http_info(channel_id, property_id, promotion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingPromotionsApi.activate_promotion_post ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingPromotionsApi.activate_promotion_post"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingPromotionsApi.activate_promotion_post"
      end
      # verify the required parameter 'promotion_id' is set
      if @api_client.config.client_side_validation && promotion_id.nil?
        fail ArgumentError, "Missing the required parameter 'promotion_id' when calling BookingPromotionsApi.activate_promotion_post"
      end
      # resource path
      local_var_path = '/activate-promotion'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'promotionId'] = promotion_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingPromotionsApi#activate_promotion_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate a promotion
    # Deactivate a promotion
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param promotion_id [String] Promotion Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def deactivate_promotion_post(channel_id, property_id, promotion_id, opts = {})
      deactivate_promotion_post_with_http_info(channel_id, property_id, promotion_id, opts)
      nil
    end

    # Deactivate a promotion
    # Deactivate a promotion
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param promotion_id [String] Promotion Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def deactivate_promotion_post_with_http_info(channel_id, property_id, promotion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingPromotionsApi.deactivate_promotion_post ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingPromotionsApi.deactivate_promotion_post"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingPromotionsApi.deactivate_promotion_post"
      end
      # verify the required parameter 'promotion_id' is set
      if @api_client.config.client_side_validation && promotion_id.nil?
        fail ArgumentError, "Missing the required parameter 'promotion_id' when calling BookingPromotionsApi.deactivate_promotion_post"
      end
      # resource path
      local_var_path = '/deactivate-promotion'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'promotionId'] = promotion_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingPromotionsApi#deactivate_promotion_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of promotion channels
    # Get a list of promotion channels
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param type [String] Type of promotion channel
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def promotion_channels_get(channel_id, property_id, type, opts = {})
      promotion_channels_get_with_http_info(channel_id, property_id, type, opts)
      nil
    end

    # Get a list of promotion channels
    # Get a list of promotion channels
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param type [String] Type of promotion channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def promotion_channels_get_with_http_info(channel_id, property_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingPromotionsApi.promotion_channels_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingPromotionsApi.promotion_channels_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingPromotionsApi.promotion_channels_get"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BookingPromotionsApi.promotion_channels_get"
      end
      # resource path
      local_var_path = '/promotion-channels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingPromotionsApi#promotion_channels_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of promotions
    # Get a list of promotions
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param active [Integer] 0 or 1
    # @param [Hash] opts the optional parameters
    # @return [PromotionsResponse]
    def promotions_get(channel_id, property_id, active, opts = {})
      data, _status_code, _headers = promotions_get_with_http_info(channel_id, property_id, active, opts)
      data
    end

    # Get a list of promotions
    # Get a list of promotions
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param active [Integer] 0 or 1
    # @param [Hash] opts the optional parameters
    # @return [Array<(PromotionsResponse, Integer, Hash)>] PromotionsResponse data, response status code and response headers
    def promotions_get_with_http_info(channel_id, property_id, active, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingPromotionsApi.promotions_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling BookingPromotionsApi.promotions_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling BookingPromotionsApi.promotions_get"
      end
      # verify the required parameter 'active' is set
      if @api_client.config.client_side_validation && active.nil?
        fail ArgumentError, "Missing the required parameter 'active' when calling BookingPromotionsApi.promotions_get"
      end
      # resource path
      local_var_path = '/promotions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'active'] = active

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PromotionsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingPromotionsApi#promotions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post a promotion
    # Post a promotion
    # @param body [PromotionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def promotions_post(body, opts = {})
      promotions_post_with_http_info(body, opts)
      nil
    end

    # Post a promotion
    # Post a promotion
    # @param body [PromotionsRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def promotions_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingPromotionsApi.promotions_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BookingPromotionsApi.promotions_post"
      end
      # resource path
      local_var_path = '/promotions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingPromotionsApi#promotions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
