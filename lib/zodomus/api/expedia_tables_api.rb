=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class ExpediaTablesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Expedia Amenity Codes
    # Get Expedia Amenity Codes
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_amenity_codes_get(opts = {})
      data, _status_code, _headers = expedia_amenity_codes_get_with_http_info(opts)
      data
    end

    # Get Expedia Amenity Codes
    # Get Expedia Amenity Codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_amenity_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_amenity_codes_get ...'
      end
      # resource path
      local_var_path = '/expedia-amenity-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_amenity_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Areas
    # Get Expedia Areas
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_areas_get(opts = {})
      data, _status_code, _headers = expedia_areas_get_with_http_info(opts)
      data
    end

    # Get Expedia Areas
    # Get Expedia Areas
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_areas_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_areas_get ...'
      end
      # resource path
      local_var_path = '/expedia-areas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_areas_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Bedsizes
    # Get Expedia Bedsizes
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_bedsizes_get(opts = {})
      data, _status_code, _headers = expedia_bedsizes_get_with_http_info(opts)
      data
    end

    # Get Expedia Bedsizes
    # Get Expedia Bedsizes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_bedsizes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_bedsizes_get ...'
      end
      # resource path
      local_var_path = '/expedia-bedsizes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_bedsizes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Bedtypes
    # Get Expedia Bedtypes
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_bedtypes_get(opts = {})
      data, _status_code, _headers = expedia_bedtypes_get_with_http_info(opts)
      data
    end

    # Get Expedia Bedtypes
    # Get Expedia Bedtypes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_bedtypes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_bedtypes_get ...'
      end
      # resource path
      local_var_path = '/expedia-bedtypes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_bedtypes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Bedtypesizes
    # Get Expedia Bedtypesizes
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_bedtypesizes_get(opts = {})
      data, _status_code, _headers = expedia_bedtypesizes_get_with_http_info(opts)
      data
    end

    # Get Expedia Bedtypesizes
    # Get Expedia Bedtypesizes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_bedtypesizes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_bedtypesizes_get ...'
      end
      # resource path
      local_var_path = '/expedia-bedtypesizes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_bedtypesizes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Categories
    # Get Expedia Categories
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_categories_get(opts = {})
      data, _status_code, _headers = expedia_categories_get_with_http_info(opts)
      data
    end

    # Get Expedia Categories
    # Get Expedia Categories
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_categories_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_categories_get ...'
      end
      # resource path
      local_var_path = '/expedia-categories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_categories_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Featured Amenities
    # Get Expedia Featured Amenities
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_featured_amenities_get(opts = {})
      data, _status_code, _headers = expedia_featured_amenities_get_with_http_info(opts)
      data
    end

    # Get Expedia Featured Amenities
    # Get Expedia Featured Amenities
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_featured_amenities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_featured_amenities_get ...'
      end
      # resource path
      local_var_path = '/expedia-featured-amenities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_featured_amenities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Perstay Fees
    # Get Expedia Perstay Fees
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_perstay_fees_get(opts = {})
      data, _status_code, _headers = expedia_perstay_fees_get_with_http_info(opts)
      data
    end

    # Get Expedia Perstay Fees
    # Get Expedia Perstay Fees
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_perstay_fees_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_perstay_fees_get ...'
      end
      # resource path
      local_var_path = '/expedia-perstay-fees'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_perstay_fees_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Room Classes
    # Get Expedia Room Classes
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_room_classes_get(opts = {})
      data, _status_code, _headers = expedia_room_classes_get_with_http_info(opts)
      data
    end

    # Get Expedia Room Classes
    # Get Expedia Room Classes
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_room_classes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_room_classes_get ...'
      end
      # resource path
      local_var_path = '/expedia-room-classes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_room_classes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Room Details
    # Get Expedia Room Details
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_room_details_get(opts = {})
      data, _status_code, _headers = expedia_room_details_get_with_http_info(opts)
      data
    end

    # Get Expedia Room Details
    # Get Expedia Room Details
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_room_details_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_room_details_get ...'
      end
      # resource path
      local_var_path = '/expedia-room-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_room_details_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Room Names
    # Get Expedia Room Names
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_room_names_get(opts = {})
      data, _status_code, _headers = expedia_room_names_get_with_http_info(opts)
      data
    end

    # Get Expedia Room Names
    # Get Expedia Room Names
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_room_names_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_room_names_get ...'
      end
      # resource path
      local_var_path = '/expedia-room-names'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_room_names_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Room Types
    # Get Expedia Room Types
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_room_types_get(opts = {})
      data, _status_code, _headers = expedia_room_types_get_with_http_info(opts)
      data
    end

    # Get Expedia Room Types
    # Get Expedia Room Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_room_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_room_types_get ...'
      end
      # resource path
      local_var_path = '/expedia-room-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_room_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Surcharges
    # Get Expedia Surcharges
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_surcharges_get(opts = {})
      data, _status_code, _headers = expedia_surcharges_get_with_http_info(opts)
      data
    end

    # Get Expedia Surcharges
    # Get Expedia Surcharges
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_surcharges_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_surcharges_get ...'
      end
      # resource path
      local_var_path = '/expedia-surcharges'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_surcharges_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Value Addinclusions Corporate
    # Get Expedia Value Addinclusions Corporate
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_value_addinclusions_corporate_get(opts = {})
      data, _status_code, _headers = expedia_value_addinclusions_corporate_get_with_http_info(opts)
      data
    end

    # Get Expedia Value Addinclusions Corporate
    # Get Expedia Value Addinclusions Corporate
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_value_addinclusions_corporate_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_value_addinclusions_corporate_get ...'
      end
      # resource path
      local_var_path = '/expedia-value-addinclusions-corporate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_value_addinclusions_corporate_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Value Addinclusions
    # Get Expedia Value Addinclusions
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_value_addinclusions_get(opts = {})
      data, _status_code, _headers = expedia_value_addinclusions_get_with_http_info(opts)
      data
    end

    # Get Expedia Value Addinclusions
    # Get Expedia Value Addinclusions
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_value_addinclusions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_value_addinclusions_get ...'
      end
      # resource path
      local_var_path = '/expedia-value-addinclusions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_value_addinclusions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Expedia Views
    # Get Expedia Views
    # @param [Hash] opts the optional parameters
    # @return [ExpediatablesResponse]
    def expedia_views_get(opts = {})
      data, _status_code, _headers = expedia_views_get_with_http_info(opts)
      data
    end

    # Get Expedia Views
    # Get Expedia Views
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExpediatablesResponse, Integer, Hash)>] ExpediatablesResponse data, response status code and response headers
    def expedia_views_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ExpediaTablesApi.expedia_views_get ...'
      end
      # resource path
      local_var_path = '/expedia-views'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ExpediatablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExpediaTablesApi#expedia_views_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
