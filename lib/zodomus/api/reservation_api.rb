=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class ReservationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a reservation credit card info.
    # Get a reservation credit card info. You need a special key password to access this API. Check your backoffice for more informationa about your API Keys
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param reservation_id [String] Reservation id supplied by the channel in reservations-queue
    # @param [Hash] opts the optional parameters
    # @return [ReservationsCCResponse]
    def reservations_cc_get(channel_id, property_id, reservation_id, opts = {})
      data, _status_code, _headers = reservations_cc_get_with_http_info(channel_id, property_id, reservation_id, opts)
      data
    end

    # Get a reservation credit card info.
    # Get a reservation credit card info. You need a special key password to access this API. Check your backoffice for more informationa about your API Keys
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param reservation_id [String] Reservation id supplied by the channel in reservations-queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReservationsCCResponse, Integer, Hash)>] ReservationsCCResponse data, response status code and response headers
    def reservations_cc_get_with_http_info(channel_id, property_id, reservation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationApi.reservations_cc_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ReservationApi.reservations_cc_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ReservationApi.reservations_cc_get"
      end
      # verify the required parameter 'reservation_id' is set
      if @api_client.config.client_side_validation && reservation_id.nil?
        fail ArgumentError, "Missing the required parameter 'reservation_id' when calling ReservationApi.reservations_cc_get"
      end
      # resource path
      local_var_path = '/reservations-cc'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'reservationId'] = reservation_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReservationsCCResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationApi#reservations_cc_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a test reservation for your test property
    # Creates a test reservation. status can be 'new', 'modified' or 'cancelled'. Optionally you can set a new reservation id
    # @param body [ReservationsCreatetestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reservations_createtest_post(body, opts = {})
      reservations_createtest_post_with_http_info(body, opts)
      nil
    end

    # Create a test reservation for your test property
    # Creates a test reservation. status can be &#39;new&#39;, &#39;modified&#39; or &#39;cancelled&#39;. Optionally you can set a new reservation id
    # @param body [ReservationsCreatetestRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reservations_createtest_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationApi.reservations_createtest_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ReservationApi.reservations_createtest_post"
      end
      # resource path
      local_var_path = '/reservations-createtest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationApi#reservations_createtest_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a reservation
    # Get a reservation complete information. The credit card information can be obtained in another API
    # @param channel_id [Integer] Channel id string
    # @param property_id [String] Property id supplied by the channel
    # @param reservation_id [String] Reservation id supplied by the channel in reservations-queue
    # @param [Hash] opts the optional parameters
    # @return [ReservationsResponse]
    def reservations_get(channel_id, property_id, reservation_id, opts = {})
      data, _status_code, _headers = reservations_get_with_http_info(channel_id, property_id, reservation_id, opts)
      data
    end

    # Get a reservation
    # Get a reservation complete information. The credit card information can be obtained in another API
    # @param channel_id [Integer] Channel id string
    # @param property_id [String] Property id supplied by the channel
    # @param reservation_id [String] Reservation id supplied by the channel in reservations-queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReservationsResponse, Integer, Hash)>] ReservationsResponse data, response status code and response headers
    def reservations_get_with_http_info(channel_id, property_id, reservation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationApi.reservations_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ReservationApi.reservations_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ReservationApi.reservations_get"
      end
      # verify the required parameter 'reservation_id' is set
      if @api_client.config.client_side_validation && reservation_id.nil?
        fail ArgumentError, "Missing the required parameter 'reservation_id' when calling ReservationApi.reservations_get"
      end
      # resource path
      local_var_path = '/reservations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id
      query_params[:'reservationId'] = reservation_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReservationsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationApi#reservations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of reservations
    # Get a list of new, modified or cancelled reservations made by the channel
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [ReservationsQueueResponse]
    def reservations_queue_get(channel_id, property_id, opts = {})
      data, _status_code, _headers = reservations_queue_get_with_http_info(channel_id, property_id, opts)
      data
    end

    # Get a list of reservations
    # Get a list of new, modified or cancelled reservations made by the channel
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReservationsQueueResponse, Integer, Hash)>] ReservationsQueueResponse data, response status code and response headers
    def reservations_queue_get_with_http_info(channel_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationApi.reservations_queue_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ReservationApi.reservations_queue_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ReservationApi.reservations_queue_get"
      end
      # resource path
      local_var_path = '/reservations-queue'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReservationsQueueResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationApi#reservations_queue_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of future reservations
    # Get a list of reservations scheduled for future dates that were created before your connection to this channel manager
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [ReservationsSummaryResponse]
    def reservations_summary_get(channel_id, property_id, opts = {})
      data, _status_code, _headers = reservations_summary_get_with_http_info(channel_id, property_id, opts)
      data
    end

    # Get a list of future reservations
    # Get a list of reservations scheduled for future dates that were created before your connection to this channel manager
    # @param channel_id [Integer] Channel id
    # @param property_id [String] Property id supplied by the channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReservationsSummaryResponse, Integer, Hash)>] ReservationsSummaryResponse data, response status code and response headers
    def reservations_summary_get_with_http_info(channel_id, property_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReservationApi.reservations_summary_get ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ReservationApi.reservations_summary_get"
      end
      # verify the required parameter 'property_id' is set
      if @api_client.config.client_side_validation && property_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_id' when calling ReservationApi.reservations_summary_get"
      end
      # resource path
      local_var_path = '/reservations-summary'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channelId'] = channel_id
      query_params[:'propertyId'] = property_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ReservationsSummaryResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReservationApi#reservations_summary_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
