=begin
#Zodomus channel manager API

#Zodomus is a channel manager API for OTA's access (Booking, Expedia, Airbnb, ...)  # Introduction In this API reference you have a list of Zodomus API's       # Authentication To start using Zodomus you should get your API Keys in the development tab.\\ You will have Test and Production API Keys (only after testing).\\ To access credit card information use you API Key (test or production) with the special **credit card password**. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module Zodomus
  class BookingTablesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Booking Ambiance Types
    # Get Booking Ambiance Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_ambiance_types_get(opts = {})
      data, _status_code, _headers = booking_ambiance_types_get_with_http_info(opts)
      data
    end

    # Get Booking Ambiance Types
    # Get Booking Ambiance Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_ambiance_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_ambiance_types_get ...'
      end
      # resource path
      local_var_path = '/booking-ambiance-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_ambiance_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Breakfast Types
    # Get Booking Breakfast Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_breakfast_types_get(opts = {})
      data, _status_code, _headers = booking_breakfast_types_get_with_http_info(opts)
      data
    end

    # Get Booking Breakfast Types
    # Get Booking Breakfast Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_breakfast_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_breakfast_types_get ...'
      end
      # resource path
      local_var_path = '/booking-breakfast-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_breakfast_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Cancellation Types
    # Get Booking Cancellation Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_cancellation_types_get(opts = {})
      data, _status_code, _headers = booking_cancellation_types_get_with_http_info(opts)
      data
    end

    # Get Booking Cancellation Types
    # Get Booking Cancellation Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_cancellation_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_cancellation_types_get ...'
      end
      # resource path
      local_var_path = '/booking-cancellation-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_cancellation_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Charge Types
    # Get Booking Charge Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_charge_types_get(opts = {})
      data, _status_code, _headers = booking_charge_types_get_with_http_info(opts)
      data
    end

    # Get Booking Charge Types
    # Get Booking Charge Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_charge_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_charge_types_get ...'
      end
      # resource path
      local_var_path = '/booking-charge-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_charge_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Contact Types
    # Get Booking Contact Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_contact_types_get(opts = {})
      data, _status_code, _headers = booking_contact_types_get_with_http_info(opts)
      data
    end

    # Get Booking Contact Types
    # Get Booking Contact Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_contact_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_contact_types_get ...'
      end
      # resource path
      local_var_path = '/booking-contact-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_contact_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Cuisine Types
    # Get Booking Cuisine Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_cuisine_types_get(opts = {})
      data, _status_code, _headers = booking_cuisine_types_get_with_http_info(opts)
      data
    end

    # Get Booking Cuisine Types
    # Get Booking Cuisine Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_cuisine_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_cuisine_types_get ...'
      end
      # resource path
      local_var_path = '/booking-cuisine-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_cuisine_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Dietary Types
    # Get Booking Dietary Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_dietary_types_get(opts = {})
      data, _status_code, _headers = booking_dietary_types_get_with_http_info(opts)
      data
    end

    # Get Booking Dietary Types
    # Get Booking Dietary Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_dietary_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_dietary_types_get ...'
      end
      # resource path
      local_var_path = '/booking-dietary-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_dietary_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Fee Tax Policies
    # Get Booking Fee Tax Policies
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_fee_tax_policies_get(opts = {})
      data, _status_code, _headers = booking_fee_tax_policies_get_with_http_info(opts)
      data
    end

    # Get Booking Fee Tax Policies
    # Get Booking Fee Tax Policies
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_fee_tax_policies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_fee_tax_policies_get ...'
      end
      # resource path
      local_var_path = '/booking-fee-tax-policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_fee_tax_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Hotel Amenities
    # Get Booking Hotel Amenities
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_hotel_amenities_get(opts = {})
      data, _status_code, _headers = booking_hotel_amenities_get_with_http_info(opts)
      data
    end

    # Get Booking Hotel Amenities
    # Get Booking Hotel Amenities
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_hotel_amenities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_hotel_amenities_get ...'
      end
      # resource path
      local_var_path = '/booking-hotel-amenities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_hotel_amenities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Image Tags
    # Get Booking Image Tags
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_image_tags_get(opts = {})
      data, _status_code, _headers = booking_image_tags_get_with_http_info(opts)
      data
    end

    # Get Booking Image Tags
    # Get Booking Image Tags
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_image_tags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_image_tags_get ...'
      end
      # resource path
      local_var_path = '/booking-image-tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_image_tags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Internet Coverages
    # Get Booking Internet Coverages
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_internet_coverages_get(opts = {})
      data, _status_code, _headers = booking_internet_coverages_get_with_http_info(opts)
      data
    end

    # Get Booking Internet Coverages
    # Get Booking Internet Coverages
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_internet_coverages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_internet_coverages_get ...'
      end
      # resource path
      local_var_path = '/booking-internet-coverages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_internet_coverages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Internet Types
    # Get Booking Internet Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_internet_types_get(opts = {})
      data, _status_code, _headers = booking_internet_types_get_with_http_info(opts)
      data
    end

    # Get Booking Internet Types
    # Get Booking Internet Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_internet_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_internet_types_get ...'
      end
      # resource path
      local_var_path = '/booking-internet-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_internet_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Language Codes
    # Get Booking Language Codes
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_language_codes_get(opts = {})
      data, _status_code, _headers = booking_language_codes_get_with_http_info(opts)
      data
    end

    # Get Booking Language Codes
    # Get Booking Language Codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_language_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_language_codes_get ...'
      end
      # resource path
      local_var_path = '/booking-language-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_language_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Meal Plans
    # Get Booking Meal Plans
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_meal_plans_get(opts = {})
      data, _status_code, _headers = booking_meal_plans_get_with_http_info(opts)
      data
    end

    # Get Booking Meal Plans
    # Get Booking Meal Plans
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_meal_plans_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_meal_plans_get ...'
      end
      # resource path
      local_var_path = '/booking-meal-plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_meal_plans_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Noshow Types
    # Get Booking Noshow Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_noshow_types_get(opts = {})
      data, _status_code, _headers = booking_noshow_types_get_with_http_info(opts)
      data
    end

    # Get Booking Noshow Types
    # Get Booking Noshow Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_noshow_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_noshow_types_get ...'
      end
      # resource path
      local_var_path = '/booking-noshow-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_noshow_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Parking Properties
    # Get Booking Parking Properties
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_parking_properties_get(opts = {})
      data, _status_code, _headers = booking_parking_properties_get_with_http_info(opts)
      data
    end

    # Get Booking Parking Properties
    # Get Booking Parking Properties
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_parking_properties_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_parking_properties_get ...'
      end
      # resource path
      local_var_path = '/booking-parking-properties'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_parking_properties_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Parking Reservations
    # Get Booking Parking Reservations
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_parking_reservations_get(opts = {})
      data, _status_code, _headers = booking_parking_reservations_get_with_http_info(opts)
      data
    end

    # Get Booking Parking Reservations
    # Get Booking Parking Reservations
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_parking_reservations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_parking_reservations_get ...'
      end
      # resource path
      local_var_path = '/booking-parking-reservations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_parking_reservations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Parking Types
    # Get Booking Parking Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_parking_types_get(opts = {})
      data, _status_code, _headers = booking_parking_types_get_with_http_info(opts)
      data
    end

    # Get Booking Parking Types
    # Get Booking Parking Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_parking_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_parking_types_get ...'
      end
      # resource path
      local_var_path = '/booking-parking-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_parking_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Payment Types
    # Get Booking Payment Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_payment_types_get(opts = {})
      data, _status_code, _headers = booking_payment_types_get_with_http_info(opts)
      data
    end

    # Get Booking Payment Types
    # Get Booking Payment Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_payment_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_payment_types_get ...'
      end
      # resource path
      local_var_path = '/booking-payment-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_payment_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Pets Allowed
    # Get Booking Pets Allowed
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_pets_allowed_get(opts = {})
      data, _status_code, _headers = booking_pets_allowed_get_with_http_info(opts)
      data
    end

    # Get Booking Pets Allowed
    # Get Booking Pets Allowed
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_pets_allowed_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_pets_allowed_get ...'
      end
      # resource path
      local_var_path = '/booking-pets-allowed'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_pets_allowed_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Phone Types
    # Get Booking Phone Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_phone_types_get(opts = {})
      data, _status_code, _headers = booking_phone_types_get_with_http_info(opts)
      data
    end

    # Get Booking Phone Types
    # Get Booking Phone Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_phone_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_phone_types_get ...'
      end
      # resource path
      local_var_path = '/booking-phone-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_phone_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Prepayment Types
    # Get Booking Prepayment Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_prepayment_types_get(opts = {})
      data, _status_code, _headers = booking_prepayment_types_get_with_http_info(opts)
      data
    end

    # Get Booking Prepayment Types
    # Get Booking Prepayment Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_prepayment_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_prepayment_types_get ...'
      end
      # resource path
      local_var_path = '/booking-prepayment-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_prepayment_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Property Types
    # Get Booking Property Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_property_types_get(opts = {})
      data, _status_code, _headers = booking_property_types_get_with_http_info(opts)
      data
    end

    # Get Booking Property Types
    # Get Booking Property Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_property_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_property_types_get ...'
      end
      # resource path
      local_var_path = '/booking-property-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_property_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Restaurant Services
    # Get Booking Restaurant Services
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_restaurant_services_get(opts = {})
      data, _status_code, _headers = booking_restaurant_services_get_with_http_info(opts)
      data
    end

    # Get Booking Restaurant Services
    # Get Booking Restaurant Services
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_restaurant_services_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_restaurant_services_get ...'
      end
      # resource path
      local_var_path = '/booking-restaurant-services'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_restaurant_services_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Room Amenities
    # Get Booking Room Amenities
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_room_amenities_get(opts = {})
      data, _status_code, _headers = booking_room_amenities_get_with_http_info(opts)
      data
    end

    # Get Booking Room Amenities
    # Get Booking Room Amenities
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_room_amenities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_room_amenities_get ...'
      end
      # resource path
      local_var_path = '/booking-room-amenities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_room_amenities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Room Types
    # Get Booking Room Types
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_room_types_get(opts = {})
      data, _status_code, _headers = booking_room_types_get_with_http_info(opts)
      data
    end

    # Get Booking Room Types
    # Get Booking Room Types
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_room_types_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_room_types_get ...'
      end
      # resource path
      local_var_path = '/booking-room-types'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_room_types_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Booking Transportation Codes
    # Get Booking Transportation Codes
    # @param [Hash] opts the optional parameters
    # @return [BookingtablesResponse]
    def booking_transportation_codes_get(opts = {})
      data, _status_code, _headers = booking_transportation_codes_get_with_http_info(opts)
      data
    end

    # Get Booking Transportation Codes
    # Get Booking Transportation Codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookingtablesResponse, Integer, Hash)>] BookingtablesResponse data, response status code and response headers
    def booking_transportation_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BookingTablesApi.booking_transportation_codes_get ...'
      end
      # resource path
      local_var_path = '/booking-transportation-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BookingtablesResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BookingTablesApi#booking_transportation_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
